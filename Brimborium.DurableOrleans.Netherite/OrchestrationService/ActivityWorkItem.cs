// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace Orleans.DurableTask.Netherite;

class ActivityWorkItem : TaskActivityWorkItem, TransportAbstraction.IDurabilityListener {
    public Partition Partition { get; set; }

    // the partition for the orchestration that issued this activity
    public uint OriginPartition { get; set; }

    // a partition-local identifier for this activity (is a sequence number generated by ActivitiesState)
    public long ActivityId { get; set; }

    public string OriginWorkItem { get; set; }

    public double StartedAt { get; set; }

    // enforces that the activity cannot start executing before the issuing event is persisted
    public readonly TaskCompletionSource<object> WaitForDequeueCountPersistence;

    ActivityWorkItem(Partition partition, long activityId, TaskMessage message, string originWorkItem) {
        this.Partition = partition;
        this.OriginPartition = partition.PartitionFunction(message.OrchestrationInstance.InstanceId);
        this.ActivityId = activityId;
        this.OriginWorkItem = originWorkItem;
        this.Id = activityId.ToString();
        this.LockedUntilUtc = DateTime.MaxValue; // this backend does not require workitem lock renewals
        this.TaskMessage = message;
    }

    public ActivityWorkItem(Partition partition, long activityId, TaskMessage message, string originWorkItem, PartitionUpdateEvent filingEvent)
        : this(partition, activityId, message, originWorkItem) {
        if (partition.Settings.PersistDequeueCountBeforeStartingWorkItem) {
            this.WaitForDequeueCountPersistence = new TaskCompletionSource<object>();
            DurabilityListeners.Register(filingEvent, this);
        }
    }

    public string WorkItemId => ActivitiesState.GetWorkItemId(this.Partition.PartitionId, this.ActivityId);

    public string ExecutionType => (this.Partition.PartitionId == this.OriginPartition ? "Local" : "Remote");

    public void ConfirmDurable(Event evt) {
        this.WaitForDequeueCountPersistence.TrySetResult(null);
    }
}
